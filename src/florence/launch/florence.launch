<?xml version="1.0"?>
<launch>
  <!--arg name="laser_ust10_front_enabled" value="true" />
  <arg name="laser_enabled" value="true" />
  <arg name="lms1xx_enabled" value="true" /-->

  <group if="$(optenv RPLIDAR 0)">
    <include file="$(find rplidar_ros)/launch/rplidar.launch" />

    <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter">
      <rosparam command="load" file="$(find florence)/config/husky_laser_filter.yaml" />
    </node>
  </group>

  <!-- If we are using UST10 lidars then they are already running and we just need to start laser filters -->
  <group if="$(optenv HUSKY_UST10_ENABLED 0)">
    <!-- Let's merge the output from our two lidars into a single topic. -->
    <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
      <param name="destination_frame" value="front_laser_mount"/>
      <param name="cloud_destination_topic" value="/merged_cloud"/>
      <param name="scan_destination_topic" value="/scan"/>
      <param name="laserscan_topics" value ="/front/scan /rear/scan" /> <!-- LIST OF THE LASER SCAN TOPICS TO SUBSCRIBE -->
      <param name="angle_min" value="-2.0"/>
      <param name="angle_max" value="2.0"/>
      <param name="angle_increment" value="0.0058"/>
      <param name="scan_time" value="0.0333333"/>
      <param name="range_min" value="0.30"/>
      <param name="range_max" value="50.0"/>
    </node>

    <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter">
      <rosparam command="load" file="$(find florence)/config/husky_laser_filter.yaml" />
    </node>
  </group>

  <group if="$(optenv USB_CAM 0)">
    <!--node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
      <param name="video_device" value="$(optenv USB_CAM_DEVICE /dev/video0)" />
      <param name="pixel_format" value="mjpeg" />
      <param name="sharpness" value="200" />
      <param name="autofocus" value="true" />
      <param name="image_width" value="1280" />
      <param name="image_height" value="720" />
      <param name="framerate" value="10" />

      <param name="camera_frame_id" value="usb_cam" />
      <param name="io_method" value="mmap"/>
    </node-->
    <node name="usb_cam_publisher" pkg="florence" type="usb_cam_publisher.py" output="log" >
    </node>
  </group>

  <!-- Compresses ROS simulation image into a CompressedImage that we can show in unity -->
  <group if="$(optenv SIM_CAM 0)">
    <!--rosrun image_transport republish raw in:=/sim_camera1/image_raw compressed out:=/sim_camera1/image_comp -->
    <node name="republish" pkg="image_transport" type="republish" respawn="false" output="screen" >
      <param name="in_transport" value="raw" />
      <!--param name="in" value="/sim_camera1/image_raw"/-->
      <param name="out_transport" value="compressed"/>
      <!--param name="out" value="/sim_camera1/image_comp"/-->
      <remap from="/sim_camera1/image_raw" to="/sim_camera1/image_comp" />
    </node>
  </group>

  <!-- Run Florence base controller -->
  <node name="florence_base_controller" pkg="florence" type="move_florence.py" output="log" >
  </node>

  <!--- Run Gazebo -->
  <!--include file="$(find husky_gazebo)/launch/husky_playpen.launch" /-->

  <!--- Run gmapping -->
  <include file="$(find husky_navigation)/launch/gmapping.launch">
    <param name="scan_topic" value="/scan_filtered" />
  </include>

  <!-- Run husky's cartographer -->
  <!-- include file="$(find husky_cartographer_navigation)/launch/cartographer_florence.launch" /-->

  <!--- Run Move Base -->
  <include file="$(find husky_navigation)/launch/move_base.launch" />
  
  <!--- Run Rviz -->
  <!--include file="$(find husky_viz)/launch/view_robot.launch" /-->

  <!-- Run ROS-TCP-Endpoint -->
  <include file="$(find ros_tcp_endpoint)/launch/endpoint.launch" />

</launch>
